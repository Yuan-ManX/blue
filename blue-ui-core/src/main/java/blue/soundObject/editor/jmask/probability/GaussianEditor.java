/*
 * GaussianEditor.java
 *
 * Created on April 22, 2008, 9:35 PM
 */
package blue.soundObject.editor.jmask.probability;

import blue.soundObject.editor.jmask.DurationSettable;
import blue.soundObject.jmask.probability.Gaussian;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author  syi
 */
public class GaussianEditor extends javax.swing.JPanel implements DurationSettable {

    private Gaussian gaussian = null;

    public GaussianEditor(Gaussian gaussian) {
        initComponents();

        sigmaTableEditor.setMinMaxEnabled(false);
        muTableEditor.setMinMaxEnabled(false);

        sigmaTableEditor.setTable(gaussian.getSigmaTable());
        muTableEditor.setTable(gaussian.getMuTable());

        sigmaSpinner.setModel(
                new SpinnerNumberModel(gaussian.getSigma(), 0.0, 1.0, 0.1));

        muSpinner.setModel(
                new SpinnerNumberModel(gaussian.getMu(), 0.0, 1.0, 0.1));

        sigmaTypeComboBox.setSelectedIndex(gaussian.isSigmaTableEnabled() ? 1 : 0);
        meanTypeComboBox.setSelectedIndex(gaussian.isMuTableEnabled() ? 1 : 0);
        
        this.gaussian = gaussian;

        updateDisplay();
    }

    private void updateDisplay() {
        sigmaSpinner.setVisible(!this.gaussian.isSigmaTableEnabled());
        sigmaTableEditor.setVisible(this.gaussian.isSigmaTableEnabled());
        muSpinner.setVisible(!this.gaussian.isMuTableEnabled());
        muTableEditor.setVisible(this.gaussian.isMuTableEnabled());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        aButtonGroup = new javax.swing.ButtonGroup();
        bButtonGroup = new javax.swing.ButtonGroup();
        sigmaSpinner = new javax.swing.JSpinner();
        sigmaTableEditor = new blue.soundObject.editor.jmask.TableEditor();
        muSpinner = new javax.swing.JSpinner();
        muTableEditor = new blue.soundObject.editor.jmask.TableEditor();
        sigmaTypeComboBox = new javax.swing.JComboBox();
        meanTypeComboBox = new javax.swing.JComboBox();

        sigmaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sigmaSpinnerStateChanged(evt);
            }
        });

        muSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                muSpinnerStateChanged(evt);
            }
        });

        sigmaTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Standard Deviation/sigma (Constant)", "Standard Deviation/sigma (Table)" }));
        sigmaTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigmaTypeComboBoxActionPerformed(evt);
            }
        });

        meanTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mean/mu (Constant)", "Mean/mu (Table)" }));
        meanTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanTypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(meanTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(muSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sigmaTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sigmaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sigmaTableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 414, Short.MAX_VALUE)
                    .addComponent(muTableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 414, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {meanTypeComboBox, sigmaTypeComboBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sigmaTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sigmaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sigmaTableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(meanTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(muSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(muTableEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void sigmaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sigmaSpinnerStateChanged
        if (this.gaussian != null) {
            this.gaussian.setSigma(((Double) sigmaSpinner.getValue()).doubleValue());
        }
}//GEN-LAST:event_sigmaSpinnerStateChanged

    private void muSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_muSpinnerStateChanged
        if (this.gaussian != null) {
            this.gaussian.setMu(((Double) muSpinner.getValue()).doubleValue());
        }
}//GEN-LAST:event_muSpinnerStateChanged

private void sigmaTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigmaTypeComboBoxActionPerformed
    if (this.gaussian != null) {
        this.gaussian.setSigmaTableEnabled(sigmaTypeComboBox.getSelectedIndex() == 1);
        updateDisplay();
    }
}//GEN-LAST:event_sigmaTypeComboBoxActionPerformed

private void meanTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanTypeComboBoxActionPerformed
    if (this.gaussian != null) {
        this.gaussian.setMuTableEnabled(meanTypeComboBox.getSelectedIndex() == 1);
        updateDisplay();
    }
}//GEN-LAST:event_meanTypeComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup aButtonGroup;
    private javax.swing.ButtonGroup bButtonGroup;
    private javax.swing.JComboBox meanTypeComboBox;
    private javax.swing.JSpinner muSpinner;
    private blue.soundObject.editor.jmask.TableEditor muTableEditor;
    private javax.swing.JSpinner sigmaSpinner;
    private blue.soundObject.editor.jmask.TableEditor sigmaTableEditor;
    private javax.swing.JComboBox sigmaTypeComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setDuration(double duration) {
        muTableEditor.setDuration(duration);
        sigmaTableEditor.setDuration(duration);
    }
}
