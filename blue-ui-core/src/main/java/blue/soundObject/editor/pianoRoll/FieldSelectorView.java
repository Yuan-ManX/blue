/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package blue.soundObject.editor.pianoRoll;

import blue.soundObject.pianoRoll.FieldDef;
import blue.utility.ListUtil;
import javafx.beans.value.ObservableValue;
import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author stevenyi
 */
public class FieldSelectorView extends javax.swing.JPanel implements ListChangeListener<FieldDef> {

    private ObservableList<FieldDef> fieldDefinitions;
    
    FieldDef currentFieldDef = null;

    /**
     * Creates new form FieldSelectorView
     */
    public FieldSelectorView() {
        initComponents();
    }

    public void setFields(ObservableList<FieldDef> fieldDefinitions) {

        if (this.fieldDefinitions != null) {
            this.fieldDefinitions.removeListener(this);
        }

        this.fieldDefinitions = fieldDefinitions;
        fieldDefinitions.addListener(this);

        var model = new DefaultComboBoxModel<FieldDef>();
        model.addAll(fieldDefinitions);
        fieldSelectorComboBox.setModel(model);

        fieldSelectorComboBox.setSelectedIndex(fieldDefinitions.isEmpty() ? -1 : 0);

        var selected = (FieldDef) fieldSelectorComboBox.getSelectedItem();
        firePropertyChange("selectedFieldDef", currentFieldDef, selected);
        currentFieldDef = selected;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldSelectorComboBox = new javax.swing.JComboBox<>();

        setLayout(new java.awt.BorderLayout());

        fieldSelectorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSelectorComboBoxActionPerformed(evt);
            }
        });
        add(fieldSelectorComboBox, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void fieldSelectorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSelectorComboBoxActionPerformed
        var selected = (FieldDef) fieldSelectorComboBox.getSelectedItem();

        firePropertyChange("selectedFieldDef", currentFieldDef, selected);
        currentFieldDef = selected;
    }//GEN-LAST:event_fieldSelectorComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<FieldDef> fieldSelectorComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onChanged(Change<? extends FieldDef> change) {

        var currentSelected = (FieldDef) fieldSelectorComboBox.getSelectedItem();

        var model = new DefaultComboBoxModel<FieldDef>();
        model.addAll(fieldDefinitions);
        fieldSelectorComboBox.setModel(model);

        var index = ListUtil.indexOfByRef(fieldDefinitions, currentSelected);
                
        if (index < 0 && !fieldDefinitions.isEmpty()) {
            index = 0;
        }
        fieldSelectorComboBox.setSelectedIndex(index);

        var selected = (FieldDef) fieldSelectorComboBox.getSelectedItem();

        if (selected != currentSelected) {
            firePropertyChange("selectedFieldDef", currentFieldDef, selected);
            currentFieldDef = selected;
        }
    }

}
