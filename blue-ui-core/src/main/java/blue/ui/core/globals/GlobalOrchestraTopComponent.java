/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package blue.ui.core.globals;

import blue.GlobalOrcSco;
import blue.projects.BlueProject;
import blue.projects.BlueProjectManager;
import blue.ui.nbutilities.MimeTypeEditorComponent;
import blue.ui.utilities.SimpleDocumentListener;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.undo.UndoManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.awt.UndoRedo;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */

@ConvertAsProperties(dtd = "-//blue.ui.core.globals//GlobalOrchestra//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "GlobalOrchestraTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true,
        position = 500)
@ActionID(category = "Window", id = "blue.ui.core.globals.GlobalOrchestraTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window", position = 1400),
    @ActionReference(path = "Shortcuts", name = "D-5")
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GlobalOrchestraAction",
        preferredID = "GlobalOrchestraTopComponent"
)
@NbBundle.Messages({
    "CTL_GlobalOrchestraAction=Global Orchestra",
    "CTL_GlobalOrchestraTopComponent=Global Orchestra",
    "HINT_GlobalOrchestraTopComponent=This is a Global Orchestra window"
})
public final class GlobalOrchestraTopComponent extends TopComponent {

    private static GlobalOrchestraTopComponent instance;

    private GlobalOrcSco globalOrcSco = null;
    
    UndoManager undo = new UndoRedo.Manager();

    MimeTypeEditorComponent editor;

    private GlobalOrchestraTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(GlobalOrchestraTopComponent.class, "CTL_GlobalOrchestraTopComponent"));
        setToolTipText(NbBundle.getMessage(GlobalOrchestraTopComponent.class, "HINT_GlobalOrchestraTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

        editor = new MimeTypeEditorComponent("text/x-csound-orc");
        this.add(editor, BorderLayout.CENTER);
        
        editor.getDocument().addUndoableEditListener(undo);

        
        BlueProjectManager.getInstance().addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (BlueProjectManager.CURRENT_PROJECT.equals(evt.
                    getPropertyName())) {
                globalOrcSco = null;
                reinitialize();
            }
        });

        reinitialize();
        editor.setUndoManager(undo);

        editor.getDocument().addDocumentListener(new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (globalOrcSco != null) {
                    globalOrcSco.setGlobalOrc(editor.getText());
                }
            }
        });
    }

    private void reinitialize() {
        BlueProject project = BlueProjectManager.getInstance().getCurrentProject();
        if (project == null) {
            editor.setText("");
            editor.getJEditorPane().setEditable(false);
        } else {
            GlobalOrcSco localGlobals = project.getData().getGlobalOrcSco();
            editor.setText(localGlobals.getGlobalOrc());
            editor.getJEditorPane().setEditable(true);
            globalOrcSco = localGlobals;
        }
        
        editor.getJEditorPane().setCaretPosition(0);

        undo.discardAllEdits();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }
    
}
