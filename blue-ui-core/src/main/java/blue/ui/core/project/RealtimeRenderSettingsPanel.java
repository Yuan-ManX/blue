/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RealtimeRenderSettingsPanel.java
 *
 * Created on Feb 8, 2009, 8:36:42 PM
 */
package blue.ui.core.project;

import blue.ProjectProperties;
import blue.ui.utilities.SimpleDocumentListener;
import java.io.File;
import javax.swing.event.DocumentEvent;
import org.openide.awt.HtmlBrowser;
import org.openide.modules.InstalledFileLocator;
import org.openide.util.Exceptions;

/**
 *
 * @author steven
 */
public class RealtimeRenderSettingsPanel extends javax.swing.JPanel {

    private ProjectProperties projectProperties = null;

    /** Creates new form RealtimeRenderSettingsPanel */
    public RealtimeRenderSettingsPanel() {
        initComponents();

        srText.getDocument().addDocumentListener(new SimpleDocumentListener() {

            @Override
            public void documentChanged(DocumentEvent e) {
                if (projectProperties != null) {
                    projectProperties.sampleRate = srText.getText();
                }
            }
        });

        ksmpsText.getDocument().addDocumentListener(
                new SimpleDocumentListener() {

                    @Override
                    public void documentChanged(DocumentEvent e) {
                        if (projectProperties != null) {
                            projectProperties.ksmps = ksmpsText.getText();
                        }
                    }
                });

        nchnlsText.getDocument().addDocumentListener(
                new SimpleDocumentListener() {

                    @Override
                    public void documentChanged(DocumentEvent e) {
                        if (projectProperties != null) {
                            projectProperties.channels = nchnlsText.getText();
                        }
                    }
                });
       
        zeroDbFSText.getDocument().addDocumentListener(
                new blue.ui.utilities.SimpleDocumentListener() {

                    @Override
                    public void documentChanged(DocumentEvent e) {
                        if (projectProperties != null) {
                            projectProperties.zeroDbFS = zeroDbFSText.getText();
                        }
                    }
                });

        advancedSettingsText.getDocument().addDocumentListener(
                new SimpleDocumentListener() {

                    @Override
                    public void documentChanged(DocumentEvent e) {
                        if (projectProperties != null) {
                            projectProperties.advancedSettings = advancedSettingsText.getText();
                        }
                    }
                });
    }

    public void setProjectProperties(ProjectProperties projectProperties) {
        this.projectProperties = null;

        if (projectProperties != null) {
            srText.setText(projectProperties.sampleRate);
            ksmpsText.setText(projectProperties.ksmps);
            nchnlsText.setText(projectProperties.channels);
            audioOutCBox.setSelected(projectProperties.useAudioOut);
            audioInCBox.setSelected(projectProperties.useAudioIn);
            midiInCBox.setSelected(projectProperties.useMidiIn);
            midiOutCBox.setSelected(projectProperties.useMidiOut);

            noteAmpCBox.setSelected(projectProperties.noteAmpsEnabled);
            outOfRangeCBox.setSelected(projectProperties.outOfRangeEnabled);
            warningsCBox.setSelected(projectProperties.warningsEnabled);
            benchmarkCBox.setSelected(projectProperties.benchmarkEnabled);

            advancedSettingsText.setText(projectProperties.advancedSettings);
            overrideCBox.setSelected(projectProperties.completeOverride);

            zeroDbFSCheckBox.setSelected(projectProperties.useZeroDbFS);
            zeroDbFSText.setText(projectProperties.zeroDbFS);
            
            this.projectProperties = projectProperties;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        audioInCBox = new javax.swing.JCheckBox();
        midiInCBox = new javax.swing.JCheckBox();
        midiOutCBox = new javax.swing.JCheckBox();
        noteAmpCBox = new javax.swing.JCheckBox();
        overrideCBox = new javax.swing.JCheckBox();
        benchmarkCBox = new javax.swing.JCheckBox();
        warningsCBox = new javax.swing.JCheckBox();
        outOfRangeCBox = new javax.swing.JCheckBox();
        audioOutCBox = new javax.swing.JCheckBox();
        ksmpsText = new javax.swing.JTextField();
        srText = new javax.swing.JTextField();
        nchnlsText = new javax.swing.JTextField();
        advancedSettingsText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        zeroDbFSCheckBox = new javax.swing.JCheckBox();
        zeroDbFSText = new javax.swing.JTextField();

        jLabel4.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel4.text_1")); // NOI18N

        jLabel3.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel3.text_1")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel2.text_1")); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel1.text_1")); // NOI18N

        jLabel9.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel9.text_1")); // NOI18N

        jLabel14.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jLabel14.text_1")); // NOI18N

        audioInCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioInCBox.text_1")); // NOI18N
        audioInCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        audioInCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioInCBoxActionPerformed(evt);
            }
        });

        midiInCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiInCBox.text_1")); // NOI18N
        midiInCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        midiInCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midiInCBoxActionPerformed(evt);
            }
        });

        midiOutCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.midiOutCBox.text_1")); // NOI18N
        midiOutCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        midiOutCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                midiOutCBoxActionPerformed(evt);
            }
        });

        noteAmpCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.noteAmpCBox.text_1")); // NOI18N
        noteAmpCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        noteAmpCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteAmpCBoxActionPerformed(evt);
            }
        });

        overrideCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.overrideCBox.text_1")); // NOI18N
        overrideCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        overrideCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overrideCBoxActionPerformed(evt);
            }
        });

        benchmarkCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.benchmarkCBox.text_1")); // NOI18N
        benchmarkCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        benchmarkCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                benchmarkCBoxActionPerformed(evt);
            }
        });

        warningsCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.warningsCBox.text_1")); // NOI18N
        warningsCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        warningsCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warningsCBoxActionPerformed(evt);
            }
        });

        outOfRangeCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.outOfRangeCBox.text_1")); // NOI18N
        outOfRangeCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        outOfRangeCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outOfRangeCBoxActionPerformed(evt);
            }
        });

        audioOutCBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.audioOutCBox.text_1")); // NOI18N
        audioOutCBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        audioOutCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioOutCBoxActionPerformed(evt);
            }
        });

        jButton1.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.jButton1.text_1")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1openAdvancedFlags(evt);
            }
        });

        zeroDbFSCheckBox.setText(org.openide.util.NbBundle.getMessage(RealtimeRenderSettingsPanel.class, "RealtimeRenderSettingsPanel.zeroDbFSCheckBox.text")); // NOI18N
        zeroDbFSCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroDbFSCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zeroDbFSCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ksmpsText)
                    .addComponent(nchnlsText)
                    .addComponent(midiOutCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(benchmarkCBox)
                    .addComponent(warningsCBox)
                    .addComponent(outOfRangeCBox)
                    .addComponent(noteAmpCBox)
                    .addComponent(midiInCBox)
                    .addComponent(audioInCBox)
                    .addComponent(audioOutCBox)
                    .addComponent(srText)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(overrideCBox, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                            .addComponent(advancedSettingsText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(zeroDbFSText))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(srText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ksmpsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nchnlsText, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(zeroDbFSCheckBox)
                    .addComponent(zeroDbFSText, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(audioOutCBox))
                .addGap(7, 7, 7)
                .addComponent(audioInCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(midiInCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(midiOutCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(noteAmpCBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outOfRangeCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningsCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(benchmarkCBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton1)
                    .addComponent(advancedSettingsText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overrideCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void audioInCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioInCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.useAudioIn = audioInCBox.isSelected();
        }
    }//GEN-LAST:event_audioInCBoxActionPerformed

    private void midiInCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiInCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.useMidiIn = midiInCBox.isSelected();
        }
    }//GEN-LAST:event_midiInCBoxActionPerformed

    private void midiOutCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_midiOutCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.useMidiOut = midiOutCBox.isSelected();
        }
    }//GEN-LAST:event_midiOutCBoxActionPerformed

    private void noteAmpCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteAmpCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.noteAmpsEnabled = noteAmpCBox.isSelected();
        }
    }//GEN-LAST:event_noteAmpCBoxActionPerformed

    private void overrideCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overrideCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.completeOverride = overrideCBox.isSelected();
        }
    }//GEN-LAST:event_overrideCBoxActionPerformed

    private void benchmarkCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_benchmarkCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.benchmarkEnabled = benchmarkCBox.isSelected();
        }
    }//GEN-LAST:event_benchmarkCBoxActionPerformed

    private void warningsCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warningsCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.warningsEnabled = warningsCBox.isSelected();
        }
    }//GEN-LAST:event_warningsCBoxActionPerformed

    private void outOfRangeCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outOfRangeCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.outOfRangeEnabled = outOfRangeCBox.isSelected();
        }
    }//GEN-LAST:event_outOfRangeCBoxActionPerformed

    private void audioOutCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioOutCBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.useAudioOut = audioOutCBox.isSelected();
        }
    }//GEN-LAST:event_audioOutCBoxActionPerformed

    private void jButton1openAdvancedFlags(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1openAdvancedFlags
        File manualDir = InstalledFileLocator.getDefault().
                locate("csoundManual", "csound-manual", false);
        File index = new File(manualDir, "CommandFlags.html");

        try {
            HtmlBrowser.URLDisplayer.getDefault().showURL(index.toURI().toURL());
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButton1openAdvancedFlags

    private void zeroDbFSCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroDbFSCheckBoxActionPerformed
        if (projectProperties != null) {
            projectProperties.useZeroDbFS = zeroDbFSCheckBox.isSelected();
        }
    }//GEN-LAST:event_zeroDbFSCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField advancedSettingsText;
    private javax.swing.JCheckBox audioInCBox;
    private javax.swing.JCheckBox audioOutCBox;
    private javax.swing.JCheckBox benchmarkCBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField ksmpsText;
    private javax.swing.JCheckBox midiInCBox;
    private javax.swing.JCheckBox midiOutCBox;
    private javax.swing.JTextField nchnlsText;
    private javax.swing.JCheckBox noteAmpCBox;
    private javax.swing.JCheckBox outOfRangeCBox;
    private javax.swing.JCheckBox overrideCBox;
    private javax.swing.JTextField srText;
    private javax.swing.JCheckBox warningsCBox;
    private javax.swing.JCheckBox zeroDbFSCheckBox;
    private javax.swing.JTextField zeroDbFSText;
    // End of variables declaration//GEN-END:variables

}
