/*
 * blue - object composition environment for csound Copyright (c) 2000-2009
 * Steven Yi (stevenyi@gmail.com)
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; see the file COPYING.LIB. If not, write to the Free
 * Software Foundation Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307
 * USA
 */
package blue.ui.core.project;

import blue.BlueData;
import blue.ProjectProperties;
import blue.project.ProjectPluginEditor;
import blue.projects.BlueProject;
import blue.projects.BlueProjectManager;
import blue.ui.nbutilities.lazyplugin.LazyPlugin;
import blue.ui.nbutilities.lazyplugin.LazyPluginFactory;
import java.beans.PropertyChangeEvent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//blue.ui.core.project//ProjectProperties//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ProjectPropertiesTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true,
        position = 700)
@ActionID(category = "Window", id = "blue.ui.core.project.ProjectPropertiesTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window", position = 1600),
    @ActionReference(path = "Shortcuts", name = "D-7")
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProjectPropertiesAction",
        preferredID = "ProjectPropertiesTopComponent"
)
@NbBundle.Messages({
    "CTL_ProjectPropertiesAction=Project Properties",
    "CTL_ProjectPropertiesTopComponent=Project Properties",
    "HINT_ProjectPropertiesTopComponent=This is a ProjectProperties window"
})
public final class ProjectPropertiesTopComponent extends TopComponent {

    private static ProjectPropertiesTopComponent instance;

    private final Map<String, ProjectPluginEditor> pluginEditors = 
            new HashMap<>();

    public ProjectPropertiesTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ProjectPropertiesTopComponent.class, "CTL_ProjectPropertiesTopComponent"));
        setToolTipText(NbBundle.getMessage(ProjectPropertiesTopComponent.class, "HINT_ProjectPropertiesTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

        setupProjectPluginEditors();

        BlueProjectManager.getInstance().addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if (BlueProjectManager.CURRENT_PROJECT.equals(evt.getPropertyName())) {
                reinitialize();
            }
        });

        reinitialize();
    }

    public void reinitialize() {

        BlueProject project = BlueProjectManager.getInstance().getCurrentProject();
        ProjectProperties projectProperties = null;
        BlueData data = null;

        if (project != null) {
            data = project.getData();

            if (data != null) {
                projectProperties = data.getProjectProperties();
            }
        }

        for (ProjectPluginEditor editor : pluginEditors.values()) {
           editor.edit(data);
        }

        this.projectInformationPanel1.setProjectProperties(projectProperties);
        this.realtimeRenderSettingsPanel1.setProjectProperties(projectProperties);
        this.diskRenderSettingsPanel1.setProjectProperties(projectProperties);
        this.mediaPanel1.setProjectProperties(projectProperties);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        realtimeRenderSettingsPanel1 = new blue.ui.core.project.RealtimeRenderSettingsPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        diskRenderSettingsPanel1 = new blue.ui.core.project.DiskRenderSettingsPanel();
        projectInformationPanel1 = new blue.ui.core.project.ProjectInformationPanel();
        mediaPanel1 = new blue.ui.core.project.MediaPanel();

        jScrollPane1.setViewportView(realtimeRenderSettingsPanel1);

        tabs.addTab(org.openide.util.NbBundle.getMessage(ProjectPropertiesTopComponent.class, "ProjectPropertiesTopComponent.jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        jScrollPane2.setViewportView(diskRenderSettingsPanel1);

        tabs.addTab(org.openide.util.NbBundle.getMessage(ProjectPropertiesTopComponent.class, "ProjectPropertiesTopComponent.jScrollPane2.TabConstraints.tabTitle"), jScrollPane2); // NOI18N
        tabs.addTab(org.openide.util.NbBundle.getMessage(ProjectPropertiesTopComponent.class, "ProjectPropertiesTopComponent.projectInformationPanel1.TabConstraints.tabTitle"), projectInformationPanel1); // NOI18N
        tabs.addTab(org.openide.util.NbBundle.getMessage(ProjectPropertiesTopComponent.class, "ProjectPropertiesTopComponent.mediaPanel1.TabConstraints.tabTitle"), mediaPanel1); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private blue.ui.core.project.DiskRenderSettingsPanel diskRenderSettingsPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private blue.ui.core.project.MediaPanel mediaPanel1;
    private blue.ui.core.project.ProjectInformationPanel projectInformationPanel1;
    private blue.ui.core.project.RealtimeRenderSettingsPanel realtimeRenderSettingsPanel1;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setupProjectPluginEditors() {
        List<LazyPlugin<ProjectPluginEditor>> plugins = 
                LazyPluginFactory.loadPlugins("blue/project/plugins/editors", 
                        ProjectPluginEditor.class);

        for (LazyPlugin<ProjectPluginEditor> plugin : plugins) {
            ProjectPluginEditor editor = plugin.getInstance();
            String displayname = plugin.getDisplayName();

            tabs.add(displayname, editor);
            pluginEditors.put(displayname, editor);
        }
    }

}
